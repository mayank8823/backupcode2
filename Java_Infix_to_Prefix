import java.util.Stack;
public class Infix_to_Prefix {
    public static int prec(char c){
        switch (c){
            case '+':
            case '-':
                return 1;
                
            case '*':
            case '/':
                return 2;
                
            case '^':
                return 3;
        }
        return -1;
        }
        public static String inToPre(String str){
Stack<Character> stack = new Stack<>();
            String result = new String("");
            for(int i=str.length()-1;i>=0;--i){
                char c = str.charAt(i);
                if(Character.isLetterOrDigit(c))result+=c;
                else if(c==')')stack.push(c);
                else if(c=='('){
                    while(!stack.isEmpty() && stack.peek()!=')'){
                        result+=stack.pop();
                    }
                    stack.pop();
                }else{
                    while(!stack.isEmpty() && prec(c)<prec(stack.peek())){
                        result+=stack.pop();
                    }
                    stack.push(c);
                }
            }
            while(!stack.isEmpty()){result+=stack.pop();
            }
            return result;
        } 
    public static String reverse(String str){
        String nstr="";
        for (int i=0; i<str.length(); i++)
      {
        char ch= str.charAt(i); 
         nstr= ch+nstr; 
      }
      return nstr;
    }
    public static void main (String[] args) {
        String exp = "k+l-m*n+(o^p)*w/u/v*t+q";
        System.out.println(reverse(inToPre(exp)));
    }
}




